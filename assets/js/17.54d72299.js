(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{295:function(e,s,t){"use strict";t.r(s);var a=t(11),v=Object(a.a)({},(function(){var e=this,s=e._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"常见面试题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#常见面试题"}},[e._v("#")]),e._v(" 常见面试题")]),e._v(" "),s("h2",{attrs:{id:"_1、什么是vue-js-它有哪些优点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1、什么是vue-js-它有哪些优点"}},[e._v("#")]),e._v(" 1、什么是Vue.js？它有哪些优点？")]),e._v(" "),s("p",[e._v("Vue是一个渐进式的JavaScript框架，用户构建用户界面，简单易学、性能高、文档丰富、生态系统完备、灵活性高、可复用性强")]),e._v(" "),s("h2",{attrs:{id:"_2、vue-js的生命周期有哪些-请简述每个生命周期的作用。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2、vue-js的生命周期有哪些-请简述每个生命周期的作用。"}},[e._v("#")]),e._v(" 2、Vue.js的生命周期有哪些？请简述每个生命周期的作用。")]),e._v(" "),s("p",[e._v("Vue2：beforeCreate和created是组件化实例前和实例后的钩子函数；beforeMount和mounted是组件挂载前后挂载后的钩子函数；beforeUpdate和updated是组件更新前和更新后的钩子函数；beforeDestory和destoryed是组件销毁前和销毁后的钩子函数。")]),e._v(" "),s("p",[e._v("Vue3：created生命周期换成setup，语法变成onBeforeXXX和onXXX")]),e._v(" "),s("h2",{attrs:{id:"_3、请简述vue-js的双向数据绑定原理。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3、请简述vue-js的双向数据绑定原理。"}},[e._v("#")]),e._v(" 3、请简述Vue.js的双向数据绑定原理。")]),e._v(" "),s("p",[e._v("Vuejs的数据双向绑定原理是通过数据劫持和发布订阅模式来实现的。当数据改变时，Vuejs会自动更新视图，而当视图改变时也会自动更新数据")]),e._v(" "),s("h2",{attrs:{id:"_4、vue-js中指令和组件有什么区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4、vue-js中指令和组件有什么区别"}},[e._v("#")]),e._v(" 4、Vue.js中指令和组件有什么区别？")]),e._v(" "),s("p",[e._v("指令是Vuejs中用于操作DOM元素的的特殊属性，常用的指令有v-model、v-bind、v-for、v-if等，而组件是Vuejs中用于封装可复用UI组件的方式，可以通过注册组件进行复用")]),e._v(" "),s("h2",{attrs:{id:"_5、vue-js中的数据响应式是如何实现的"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5、vue-js中的数据响应式是如何实现的"}},[e._v("#")]),e._v(" 5、Vue.js中的数据响应式是如何实现的？")]),e._v(" "),s("p",[e._v("Vue2中是通过Object.defineproperty()方法实现的，Vue3是通过Proxy和Reflect来实现的。当数据发生变化是，自动的更新依赖")]),e._v(" "),s("h2",{attrs:{id:"_6、vue-js中的computed和watch有什么区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6、vue-js中的computed和watch有什么区别"}},[e._v("#")]),e._v(" 6、Vue.js中的computed和watch有什么区别？")]),e._v(" "),s("p",[e._v("computed是用于计算属性的特殊方法，他会依赖自动缓存结果；而watch是用来监听数据变化而执行相关的自定义操作的，可以监听到每次数据的变化")]),e._v(" "),s("h2",{attrs:{id:"_7、vue-js中的路由是什么-请简述vue-js中的路由实现原理。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7、vue-js中的路由是什么-请简述vue-js中的路由实现原理。"}},[e._v("#")]),e._v(" 7、Vue.js中的路由是什么？请简述Vue.js中的路由实现原理。")]),e._v(" "),s("p",[e._v("路由是用于控制页面跳转的机制，Vuejs中通过vue-router实现，其原理是通过监听URL变化，根据不同的URL展示不同的组件")]),e._v(" "),s("h2",{attrs:{id:"_8、vue-js中的vuex是什么-请简述vuex的作用和使用场景。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_8、vue-js中的vuex是什么-请简述vuex的作用和使用场景。"}},[e._v("#")]),e._v(" 8、Vue.js中的vuex是什么？请简述vuex的作用和使用场景。")]),e._v(" "),s("p",[e._v("Vuex是一个状态管理工具，用来管理全局数据和状态。包括：集中管理共享状态、规范化状态变化、方便调试和测试、提高代码的复用率。使用场景包括：多个组件需要共享同一状态、同一状态需要在多个视图中展示、需要对状态进行统一的管理和调试")]),e._v(" "),s("h2",{attrs:{id:"_9、vue-js中如何实现异步组件加载"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_9、vue-js中如何实现异步组件加载"}},[e._v("#")]),e._v(" 9、Vue.js中如何实现异步组件加载？")]),e._v(" "),s("p",[e._v("异步组件加载可以通过Vuejs的动态导入来实现的。可以使用动态的import语法来实现")]),e._v(" "),s("h2",{attrs:{id:"_10、vue-js中的mixins有什么作用-请举例说明。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_10、vue-js中的mixins有什么作用-请举例说明。"}},[e._v("#")]),e._v(" 10、Vue.js中的mixins有什么作用？请举例说明。")]),e._v(" "),s("p",[e._v("mixins是Vuejs中用于多组件间复用代码的方式，它可以将多个组件的公共代码提取出来，形成一个混入对象，然后将其注入到多个组件中，从而实现代码复用")])])}),[],!1,null,null,null);s.default=v.exports}}]);